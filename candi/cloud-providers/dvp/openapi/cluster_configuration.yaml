kind: YandexClusterConfiguration
apiVersions:
- apiVersion: deckhouse.io/v1
  openAPISpec:
    type: object
    description: |
      Describes the configuration of a cloud cluster in Deckhouse Virtualization Platform (DVP).

      Used by the cloud provider if a cluster's control plane is hosted in the cloud.

      Run the following command to change the configuration in a running cluster:

      ```shell
      kubectl -n d8-system exec -ti deploy/deckhouse -- deckhouse-controller edit provider-cluster-configuration
      ```
    x-doc-search: |
      ProviderClusterConfiguration
    x-examples:
      - apiVersion: deckhouse.io/v1
        kind: DVPClusterConfiguration
        layout: Standard
        sshPublicKey: "<SSH_PUBLIC_KEY>"
        masterNodeGroup:
          replicas: 1
          instanceClass:
            virtualMachine:
              cpu:
                cores: 1
              memory:
                size: 4Gi
            rootDisk:
              size: 10Gi
              image:
                type: ClusterVirtualMachineImage
                name: ubuntu
            etcDisk:
              size: 10Gi
        nodeGroups:
          - name: worker
            replicas: 1
            instanceClass:
              virtualMachine:
                cpu:
                  cores: 4
                memory:
                  size: 8Gi
              rootDisk:
                size: 10Gi
                image:
                  type: ClusterVirtualMachineImage
                  name: ubuntu
        provider:
          kubeconfigBase64: "<KUBECONFIG_BASE64_ENCODED>"

    additionalProperties: false
    required: [apiVersion, kind, masterNodeGroup, sshPublicKey, layout, provider]
    properties:
      apiVersion:
        type: string
        enum: [deckhouse.io/v1, deckhouse.io/v1alpha1]
      kind:
        type: string
        enum: [DVPClusterConfiguration]
      sshPublicKey:
        type: string
        description: |
          A public key for accessing nodes.
      masterNodeGroup:
        type: object
        description: |
          The definition of the master's NodeGroup.

          > Caution! After changing the parameters of the section, you need to run `dhctl converge` for the changes to take effect.
        additionalProperties: false
        required: [replicas, instanceClass]
        properties:
          replicas:
            description: |
              The number of master nodes to create. It is important to have an odd number of masters to ensure a quorum.
            type: integer
            minimum: 1

          # zones:
          #   description: |
          #     A limited set of zones in which nodes can be created.
          #   x-doc-required: false
          #   type: array
          #   items:
          #     enum:
          #     - ru-central1-a
          #     - ru-central1-b
          #     - ru-central1-c
          #     - ru-central1-d
          #   uniqueItems: true

          instanceClass:
            type: object
            description: |
              VM and Disks settings for the created master node.
            additionalProperties: false
            required: [virtualMachine, rootDisk, etcDisk]
            properties:

              virtualMachine: &instanceClassVirtualMachine
                type: object
                description: |
                  VM settings for the created master node.
                properties:
                  cpu:
                    description: |
                      CPU setting for VM.
                    type: object
                    additionalProperties: false
                    required: [cores]
                    properties:
                      cores:
                        description: |
                          Amount of CPU cores for VM.
                        minumum: 1
                        format: int32
                        type: integer
                      coreFraction:
                        type: string
                        default: "100%"
                        enum: ["5%", "10%", "25%", "50%", "100%"]
                        description: |
                          Guaranteed share of CPU that will be allocated to the VM. Specified as a percentage.
                          Supported values: `5%`, `10%`, `25%`, `50%`, `100%`.
                        example: 100%

                  memory:
                    type: object
                    description: |
                      Specifies the memory settings for the VM.
                    required:
                      - size
                    properties:
                      size:
                        type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        description: |
                          Amount of memory resources allowed for VM.
                        example: 4Gi

                  ipAddress:
                    type: string
                    description: |
                      The IP address that will be assigned to the VM. This address must belong to the address range specified in the virtualization module configuration in the virtualMachineCIDRs parameter
                    pattern: '^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})$'

                  additionalLabels:
                    type: object
                    description: |
                      Additional labels for VM resource.
                    additionalProperties:
                      type: string

                  additionalAnnotations:
                    type: object
                    description: |
                      Additional annotations for VM resource.
                    additionalProperties:
                      type: string


              rootDisk: &instanceClassRootDisk
                type: object
                description: |
                  Specifies settings for the root disk of VM.
                required:
                  - size
                  - image
                properties:
                  size:
                    type: string
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    description: |
                      Root disk size.
                    example: 10Gi
                  storageClassName:
                    type: string
                    description: |
                      The name of the existing StorageClass will be used to create the VM's root disk.
                  image:
                    type: object
                    description: |
                      Image parameters that will be used to create the VM's root disk.
                    properties:
                      type:
                        type: String
                        description: |
                          The type of the image source.
                        enum:
                        - "ClusterVirtualMachineImage"
                        - "VirtualMachineImage"
                      name:
                        type: String
                        description: |
                          The name of the image that will be used to create the root disk.

              etcdDisk:
                type: object
                description: |
                  Specifies settings for the etcd data disk.
                required:
                  - size
                properties:
                  size:
                    type: string
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    description: |
                      ETCD disk size.
                    example: 10Gi
                  storageClassName:
                    type: string
                    description: |
                      The name of the existing StorageClass will be used to create the ETCD data disk.

              additionalLabels:
                type: object
                description: |
                  Additional labels.
                x-doc-example: |
                  ```yaml
                  project: cms-production
                  severity: critical
                  ```
                additionalProperties:
                  type: string

      nodeGroups:
        type: array
        description: |
          An array of additional NodeGroups for creating static nodes (e.g., for dedicated front nodes or gateways).
        items:
          type: object
          required: [name, replicas, instanceClass]
          properties:
            name:
              description: |
                The name of the NodeGroup to use for generating node names.
              type: string
            replicas:
              description: |
                The number of nodes to create.
              type: integer

            # zones:
            #   type: array
            #   description: |
            #     A limited set of zones in which nodes can be created.
            #   items:
            #     enum:
            #     - ru-central1-a
            #     - ru-central1-b
            #     - ru-central1-c
            #     - ru-central1-d
            #   uniqueItems: true

            nodeTemplate:
              description: |
                Parameters of Node objects in Kubernetes to add after registering the node.
              properties:
                labels:
                  type: object
                  description: |
                    A list of labels to attach to cluster resources.

                    The same as the `metadata.labels` standard [field](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#objectmeta-v1-meta).

                    Note that you have to re-create all the machines to add new tags if tags were modified in the running cluster.
                  x-doc-example: |
                    ```yaml
                    labels:
                      environment: production
                      app: warp-drive-ai
                    ```
                  additionalProperties:
                    type: string
                annotations:
                  type: object
                  description: |
                    The same as the `metadata.annotations` standard [field](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#objectmeta-v1-meta).
                  x-doc-example: |
                    ```yaml
                    annotations:
                      ai.fleet.com/discombobulate: "true"
                    ```
                  additionalProperties:
                    type: string
                taints:
                  type: array
                  description: |
                    The same as the `.spec.taints` field of the [Node](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#taint-v1-core) object.

                    > **Caution!** Only the `effect`, `key`, `values`  fields are available.
                  x-doc-example: |
                    ```yaml
                    taints:
                    - effect: NoExecute
                      key: ship-class
                      value: frigate
                    ```
                  items:
                    type: object
                    properties:
                      effect:
                        type: string
                        enum: [NoSchedule, PreferNoSchedule, NoExecute]
                      key:
                        type: string
                      value:
                        type: string

            instanceClass:
              required: [virtualMachine, rootDisk]
              type: object
              description: |
                VM and Disk settings for the created static node.
              properties:
                virtualMachine: *instanceClassVirtualMachine
                rootDisk: *instanceClassRootDisk


      layout:
        type: string
        description: |
          The way resources are located in the cloud.

          Read [more](https://deckhouse.io/documentation/v1/modules/030-cloud-provider-yandex/layouts.html) about possible provider layouts.
        enum: [Standard]

      provider:
        type: object
        description: |
          TODO: Contains settings to connect to the Deckhouse Kubernets Platform API.
        additionalProperties: false
        properties:
          kubeconfigBase64:
            description: |
              Kubeconfig to connect to Deckhouse Kubernets Platform API base64 encoded.
            type: string
        required:
        - kubeconfigBase64

      # zones:
      #   type: array
      #   description: |
      #     The globally restricted set of zones that this cloud provider works with.
      #   items:
      #     enum:
      #       - ru-central1-a
      #       - ru-central1-b
      #       - ru-central1-c
      #       - ru-central1-d
      #   uniqueItems: true
