type: object
properties:
  inlet:
    description: |
      Способы подключения из внешнего мира.

      Поддерживаются следующие inlets:
      * `ExternalIP` — если есть узлы с публичными IP-адресами. Используйте с параметром `externalIP`;
      * `LoadBalancer` — для всех облачных провайдеров и их схем размещения с поддержкой заказа LoadBalancer;
      * `HostPort` — порт сервера OpenVPN будет доступен на узле, на котором находится под. За выбор порта отвечает параметр `hostPort`;
      * `Direct` — для нестандартных случаев. В namespace `d8-openvpn` создайте сервис с именем `openvpn-external`, который отправляет трафик в под с лейблом `app: openvpn` на порт с именем `ovpn-tcp` (или просто 1194). Из этого сервиса парсится `externalIP`, IP-адрес балансировщика или его host. Если ничего этого нет, укажите параметр `externalHost`.
  loadBalancer:
    description: |
      Секция опциональных настроек для inlet `LoadBalancer`.
    properties:
      annotations:
        description: |
          Аннотации, которые будут проставлены сервису для гибкой настройки балансировщика.

          > **Внимание!** Модуль не учитывает особенности указания аннотаций в облаках. Если аннотации для заказа балансировщика применяются только при создании сервиса, для обновления параметров выключите и включите модуль.
      sourceRanges:
        description: |
          Список адресов в формате CIDR, которым разрешен доступ на балансировщик.

          Облачный провайдер может не поддерживать данную опцию и игнорировать ее.
  hostPort:
    description: |
      Порт для подключения к OpenVPN-серверу, который будет доступен на узле с запущенным подом OpenVPN.

      Параметр доступен при выборе inlet `HostPort`.
  externalIP:
    description: |
      IP-адрес одного из узлов кластера для подключения клиентов OpenVPN.

      Требуется при использовании inlet `ExternalIP`.
  externalPort:
    description: |
      Порт, который вывешивается наружу на `externalIP` или балансировщике.
  tunnelNetwork:
    description: |
      Подсеть, используемая для туннеля OpenVPN-сервера.
  pushDefaultGatewayToClient:
    description: |
      Направьте весь трафик клиентов через VPN. Клиентам при подключении будет добавлен маршрут по умолчанию через VPN-туннель.
  pushToClientRoutes:
    description: |
      Список маршрутов для отправки клиентам при подключении.

      По умолчанию список сгенерирован из локальной сети кластера, сервисной подсети и подсети подов.
  pushToClientDNS:
    description: |
      Адрес DNS-сервера для отправки клиентам при подключении.

      По умолчанию, IP-адрес сервиса `kube-system/kube-dns`.
  pushToClientSearchDomains:
    description: |
      Список доменов поиска для отправки клиентам при подключении.

      По умолчанию, значение из переменной `global.discovery.clusterDomain`.
  auth:
    description: |
      Опции, связанные с аутентификацией или авторизацией в приложении.
    properties:
      externalAuthentication:
        description: |
          Параметры для подключения внешней аутентификации (используется механизм NGINX Ingress [external-auth](https://kubernetes.github.io/ingress-nginx/examples/auth/external-auth/), работающий на основе модуля Nginx [auth_request](http://nginx.org/en/docs/http/ngx_http_auth_request_module.html).

          > Внешняя аутентификация включается автоматически, если включен модуль [user-authn](https://deckhouse.io/documentation/v1/modules/150-user-authn/).
        properties:
          authURL:
            description: |
              URL сервиса аутентификации. Если пользователь прошел аутентификацию, сервис должен возвращать код ответа HTTP 200.
          authSignInURL:
            description: |
              URL, куда будет перенаправлен пользователь для прохождения аутентификации (если сервис аутентификации вернул код ответа HTTP, отличный от 200).
      allowedUserGroups:
        description: |
          Массив групп пользователей с доступом в .

          Используется, если включен модуль [user-authn](https://deckhouse.ru/documentation/v1/modules/150-user-authn/) или параметр [externalAuthentication](#parameters-auth-externalauthentication).

          > **Внимание!** При использовании с модулем user-authn добавьте группы в соответствующее поле в настройках [DexProvider](https://deckhouse.ru/documentation/v1/modules/150-user-authn/cr.html#dexprovider).
      whitelistSourceRanges:
        description: |
          Массив адресов в формате CIDR, которым разрешено проходить аутентификацию для доступа в OpenVPN.
  externalHost:
    description: |
      IP-адрес или домен для подключения клиентов к OpenVPN-серверу.

      По умолчанию, данные из сервиса с именем `openvpn-external`.
  ingressClass:
    description: |
      Класс Ingress-контроллера для панели администратора OpenVPN.

      По умолчанию, глобальное значение `modules.ingressClass`.
  https:
    description: |
      Тип сертификата для панели администратора OpenVPN.

      При использовании этого параметра глобальные настройки `global.modules.https` будут переопределены.
    properties:
      mode:
        description: |
          Режим работы панели администратора OpenVPN:
          * `CertManager` — будет работать по HTTPS, заказывая сертификат с помощью ClusterIssuer из параметра `certManager.clusterIssuerName`;
          * `CustomCertificate` — будет работать по HTTPS, используя сертификат из namespace `d8-system`;
          * `Disabled` — будет работать только по HTTP;
          * `OnlyInURI` —  будет работать по HTTP с внешним HTTPS-балансировщиком. Балансировщик терминирует HTTPS, и все ссылки в [user-authn](https://deckhouse.ru/documentation/v1/modules/150-user-authn/) генерируются с HTTPS-схемой. Балансировщик должен обеспечивать перенаправление с HTTP на HTTPS.
      certManager:
        properties:
          clusterIssuerName:
            description: |
              ClusterIssuer для панели администратора OpenVPN.

              Доступны `letsencrypt`, `letsencrypt-staging`, `selfsigned`, но вы можете определить свои.
      customCertificate:
        properties:
          secretName:
            description: |
              Имя Secret в namespace `d8-system` для панели администратора OpenVPN.
              
              Secret должен быть в формате [kubernetes.io/tls](https://kubernetes.github.io/ingress-nginx/user-guide/tls/#tls-secrets).
  highAvailability:
    description: |
      Ручное управление режимом отказоустойчивости.

      По умолчанию режим отказоустойчивости определяется автоматически. [Подробнее](../../deckhouse-configure-global.html#параметры) про режим отказоустойчивости.
  nodeSelector:
    description: |
      Структура, аналогичная `spec.nodeSelector` пода Kubernetes.

      Если ничего не указано или указано `false`, то Deckhouse попытается вычислить значение `nodeSelector` [автоматически](https://deckhouse.ru/documentation/v1/#выделение-узлов-под-определенный-вид-нагрузки).
  tolerations:
    description: |
      Структура, аналогичная `spec.tolerations` пода Kubernetes.

      Если ничего не указано или указано `false`, то Deckhouse попытается вычислить значение `tolerations` [автоматически](https://deckhouse.ru/documentation/v1/#выделение-узлов-под-определенный-вид-нагрузки).
  pmacctEnabled:
    description: |
      Включит логирование пользовательской активности через VPN в JSON-формате.

      Все соединения внутри `tun`-интерфейсов будут собраны через `libpcap` и записаны в лог
      в виде `{"event_type": "purge", "ip_src": "172.25.175.10", "ip_dst": "10.222.0.10", "port_src": 32172, "port_dst": 53, "ip_proto": "udp", "packets": 1, "bytes": 53}`.
    type: boolean
    default: false
    x-examples: [true, false]
oneOf:
  - properties:
      tcpEnabled:
        enum: [true]
      udpEnabled:
        enum: [true]
  - properties:
      tcpEnabled:
        enum: [true]
      udpEnabled:
        enum: [false]
  - properties:
      tcpEnabled:
        enum: [false]
      udpEnabled:
        enum: [true]
