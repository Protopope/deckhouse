{{- $binaries := "/usr/bin/git /bin/bash /bin/sh /usr/bin/perl /usr/local/bin/helm /usr/local/bin/kustomize" }}
---
artifact: {{ $.ModuleName }}/{{ $.ImageName }}-binaries-artifact
fromImage: common/alt
shell:
  install:
    - apt-get update
    - apt-get install -y dpkg curl golang openssh-server nginx unzip fcgiwrap git make wget gcc sudo zip perl-Digest-SHA gpg tzdata
    - mkdir /src
    - cd /src
    - git clone --depth 1 -b v2.9.3 https://github.com/argoproj/argo-cd.git .
    - mkdir /build
    - cd /build
    - cp /src/hack/install.sh /src/hack/tool-versions.sh ./
    - cp -R /src/hack/installers installers
    - echo "root ALL=(ALL)  ALL" >> /etc/sudoers
    - ./install.sh helm-linux
    - INSTALL_PATH=/usr/local/bin ./install.sh kustomize
    - /binary_replace.sh -i "{{ $binaries }}" -o /relocate
---
artifact: {{ .ModuleName }}/{{ $.ImageName }}-argocd-ui-artifact
from: {{ .Images.BASE_ALPINE }}
shell:
  install:
    - apk add --no-cache git nodejs yarn
    - mkdir -p /src
    - cd /src
    - git clone --depth 1 -b v2.9.3 https://github.com/argoproj/argo-cd.git .
    - mkdir /build
    - cd /build
    - cp /src/ui/package.json  /src/ui/yarn.lock ./
    - yarn install --network-timeout 200000
    - cp -R /src/ui/. ./
    - export ARGO_VERSION=latest
    - NODE_ENV='production' NODE_ONLINE_ENV='online' NODE_OPTIONS=--max_old_space_size=8192 yarn build
---
artifact: {{ .ModuleName }}/{{ $.ImageName }}-argocd-artifact
from: {{ .Images.BASE_GOLANG_20_ALPINE }}
import:
  - artifact: {{ .ModuleName }}/{{ $.ImageName }}-argocd-ui-artifact
    add: /build/dist/app
    before: install
shell:
  install:
    - apk add --no-cache git make tini-static
    - mkdir -p /go/src/github.com/argoproj/argo-cd
    - cd /go/src/github.com/argoproj/argo-cd
    - git clone --depth 1 -b v2.9.3 https://github.com/argoproj/argo-cd.git .
    - cp /build/dist/app ui/dist/app
    - export GOPROXY={{ $.GOPROXY }}
    - make argocd-all
    - ln -s /usr/local/bin/argocd /usr/local/bin/argocd-server
    - ln -s /usr/local/bin/argocd /usr/local/bin/argocd-repo-server
    - ln -s /usr/local/bin/argocd /usr/local/bin/argocd-cmp-server
    - ln -s /usr/local/bin/argocd /usr/local/bin/argocd-application-controller
    - ln -s /usr/local/bin/argocd /usr/local/bin/argocd-dex
    - ln -s /usr/local/bin/argocd /usr/local/bin/argocd-notifications
    - ln -s /usr/local/bin/argocd /usr/local/bin/argocd-applicationset-controller
    - ln -s /usr/local/bin/argocd /usr/local/bin/argocd-k8s-auth
---
image: {{ .ModuleName }}/{{ .ImageName }}
fromImage: common/distroless
import:
  - artifact: {{ $.ModuleName }}/{{ $.ImageName }}-binaries-artifact
    add: /relocate
    to: /
    before: setup
  - artifact: {{ $.ModuleName }}/{{ $.ImageName }}-argocd-artifact
    add: /sbin/tini-static
    to: /sbin/tini-static
    before: setup
  - artifact: {{ $.ModuleName }}/{{ $.ImageName }}-argocd-artifact
    add: /usr/local/bin
    to: /usr/local/bin
    before: setup
docker:
  ENV:
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  ENTRYPOINT: ["/sbin/tini-static", "--"]
